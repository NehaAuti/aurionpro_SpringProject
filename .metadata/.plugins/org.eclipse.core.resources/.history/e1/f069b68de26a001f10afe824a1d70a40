package com.aurionpro.mappings.service;

import java.util.List;

import com.itextpdf.io.font.constants.StandardFonts;
import com.itextpdf.kernel.colors.ColorConstants;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;

import java.io.ByteArrayOutputStream;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.aurionpro.mappings.entity.Passbook;
import com.aurionpro.mappings.repository.PassbookRepository;
import com.aurionpro.mappings.repository.BankAccountRepository;

@Service
public class PassbookServiceImpl implements PassbookService {

    private static final Logger logger = LoggerFactory.getLogger(PassbookServiceImpl.class);

    @Autowired
    private PassbookRepository passbookRepo;

    @Autowired
    private BankAccountRepository bankAccountRepo;
    
    public byte[] generatePassbookPdf(List<Transaction> transactions) {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

        try (PdfWriter writer = new PdfWriter(outputStream);
             PdfDocument pdf = new PdfDocument(writer);
             Document document = new Document(pdf)) {

            document.add(new Paragraph("Passbook").setFontSize(18).setBold());

            // Add transactions to the PDF
            Table table = new Table(4);
            table.addHeaderCell("Transaction ID");
            table.addHeaderCell("Amount");
            table.addHeaderCell("Transaction Date");
            table.addHeaderCell("Type");

            for (Transaction transaction : transactions) {
                table.addCell(String.valueOf(transaction.getTransactionId()));
                table.addCell(String.valueOf(transaction.getAmount()));
                table.addCell(transaction.getTransactionDate().toString());
                table.addCell(transaction.getTransactionType().toString());
            }

            document.add(table);

        } catch (Exception e) {
            e.printStackTrace(); // Handle exceptions appropriately
        }

        return outputStream.toByteArray();
    }

    @Override
    public List<Passbook> getPassbooksBySenderAccountNumber(String senderAccountNumber) {
        logger.info("Fetching passbook records for account number: {}", senderAccountNumber);

        // Check if the account exists
        if (!bankAccountRepo.existsByAccountNumber(senderAccountNumber)) {
            logger.warn("Account number not found: {}", senderAccountNumber);
            throw new IllegalArgumentException("Account number not found.");
        }

        // Fetch passbook records for the sender account number
        List<Passbook> passbookRecords = passbookRepo.findBySenderAccountNumber(senderAccountNumber);
        logger.info("Found {} passbook records for account number: {}", passbookRecords.size(), senderAccountNumber);

        return passbookRecords;
    }
}
