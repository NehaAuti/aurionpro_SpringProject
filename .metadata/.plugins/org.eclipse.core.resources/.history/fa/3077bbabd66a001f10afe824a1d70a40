package com.aurionpro.mappings.controller;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import com.aurionpro.mappings.dto.CustomerDto;
import com.aurionpro.mappings.dto.JwtAuthResponse;
import com.aurionpro.mappings.dto.LoginDTO;
import com.aurionpro.mappings.dto.RegistrationDTO;
import com.aurionpro.mappings.entity.Customer;
import com.aurionpro.mappings.entity.User;
import com.aurionpro.mappings.exception.CustomerNotFoundException;
import com.aurionpro.mappings.exception.InvalidInputException;
import com.aurionpro.mappings.service.AuthService;
import com.aurionpro.mappings.service.RecaptchaService;

import jakarta.validation.Valid;
import lombok.extern.slf4j.Slf4j;

@RestController
@RequestMapping("/bankapp")
@Slf4j
public class AuthController {
	
	@Autowired
    private AuthService authService;
	@Autowired
	private RecaptchaService recaptchaService;

	@PostMapping("register/admin")
    public ResponseEntity<User> registerAdmin(@RequestBody RegistrationDTO registerDto) {
        try {
            log.info("Registering new admin: {}", registerDto.getUsername());
            User user = authService.register(registerDto);
            log.info("Admin registration successful for: {}", registerDto.getUsername());
            return ResponseEntity.ok(user);
        } catch (InvalidInputException e) {
            log.error("Invalid input during admin registration: {}", e.getMessage());
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        } catch (Exception e) {
            log.error("Unexpected error during admin registration", e);
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PostMapping("register/customer")
    public ResponseEntity<CustomerDto> addNewCustomer(@RequestBody CustomerDto customerDTO) {
        log.info("Received request to add new customer: {} {}", customerDTO.getFirstName(), customerDTO.getLastName());
        CustomerDto createdCustomer = authService.addNewCustomer(customerDTO);
        return ResponseEntity.ok(createdCustomer);
    }

    @PostMapping("/login")
    public ResponseEntity<JwtAuthResponse> login(@RequestBody LoginDTO loginDto) {
        try {
            log.info("User login attempt: {}", loginDto.getUsername());

            // Validate reCAPTCHA
            boolean isRecaptchaValid = recaptchaService.validateRecaptcha(loginDto.getCaptchaResponse());
            if (!isRecaptchaValid) {
                log.error("Invalid CAPTCHA for user: {}", loginDto.getUsername());
                return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
            }

            // Proceed with login if CAPTCHA is valid
            String token = authService.login(loginDto);
            log.info("User login successful: {}", loginDto.getUsername());

            JwtAuthResponse jwtAuthResponse = new JwtAuthResponse();
            jwtAuthResponse.setAccessToken(token);
            return ResponseEntity.ok(jwtAuthResponse);

        } catch (CustomerNotFoundException e) {
            log.error("Customer not found: {}", e.getMessage());
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        } catch (InvalidInputException e) {
            log.error("Invalid login input: {}", e.getMessage());
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        } catch (Exception e) {
            log.error("Unexpected error during login", e);
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    
	    
}

