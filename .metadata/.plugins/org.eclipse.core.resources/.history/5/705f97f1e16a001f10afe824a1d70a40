package com.aurionpro.mappings.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.aurionpro.mappings.dto.PageResponse;
import com.aurionpro.mappings.dto.TransactionDTO;
import com.aurionpro.mappings.dto.TransactionRequestDto;
import com.aurionpro.mappings.entity.BankAccount;
import com.aurionpro.mappings.entity.Transaction;
import com.aurionpro.mappings.entity.TransactionType;
import com.aurionpro.mappings.exception.CustomerNotFoundException;
import com.aurionpro.mappings.exception.ExceptionResponse;
import com.aurionpro.mappings.exception.InvalidAmountException;
import com.aurionpro.mappings.exception.InvalidInputException;
import com.aurionpro.mappings.exception.InvalidTransactionTypeException;
import com.aurionpro.mappings.service.BankAccountService;
import com.aurionpro.mappings.service.TransactionService;

import jakarta.transaction.Transactional;
import jakarta.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/bankapp")
public class TransactionController {

    private static final Logger logger = LoggerFactory.getLogger(TransactionController.class);

    @Autowired
    private TransactionService transactionService;

    @Autowired
    private BankAccountService bankAccountService;
    
    @PostMapping("/newtransaction")
    @PreAuthorize("hasRole('CUSTOMER')")

    public ResponseEntity<Transaction> createTransaction(@RequestBody TransactionRequestDto transactionRequestDto) {
        logger.info("Received request to create transaction: {}", transactionRequestDto);

        Transaction transaction = transactionService.createTransaction(
            transactionRequestDto.getCustomerId(),
            transactionRequestDto.getSenderAccountNumber(),
            transactionRequestDto.getReceiverAccountNumber(),
            transactionRequestDto.getAmount(),
            transactionRequestDto.getTransactionType()
        );

        logger.info("Transaction created successfully with ID: {}", transaction.getTransactionId());
        return new ResponseEntity<>(transaction, HttpStatus.CREATED);
    }

    
    
    
    private boolean isValidTransactionType(TransactionType transactionType) {
        return transactionType == TransactionType.TRANSFER ||
               transactionType == TransactionType.DEBIT ||
               transactionType == TransactionType.CREDIT;
    }

    private void logTransactionDetails(TransactionDTO transactionDto) {
        // Use a logger instead of System.out.println in production code
        System.out.println("Sender Account Number: " + transactionDto.getSenderAccountNumber());
        System.out.println("Receiver Account Number: " + transactionDto.getReceiverAccountNumber());
        System.out.println("Amount: " + transactionDto.getAmount());
        System.out.println("Transaction Type: " + transactionDto.getTransactionType());
    }



    @GetMapping("/transactions/{accountNumber}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<List<Transaction>> getAllTransactionsByAccountNumber(@Valid @PathVariable String accountNumber) {
        logger.info("Fetching transactions for account number: {}", accountNumber);
        try {
            List<Transaction> transactions = transactionService.getAllTransactionsByAccountNumber(accountNumber);
            if (transactions.isEmpty()) {
                logger.warn("No transactions found for account number: {}", accountNumber);
                return new ResponseEntity<>(HttpStatus.NOT_FOUND);
            }
            logger.info("Transactions fetched successfully for account number: {}", accountNumber);
            return new ResponseEntity<>(transactions, HttpStatus.OK);
        } catch (Exception e) {
            logger.error("Error occurred while retrieving transactions: {}", e.getMessage(), e);
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping("/transactions")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<PageResponse<Transaction>> viewTransactions(@Valid @RequestParam int pageNo, @RequestParam int pageSize) {
        logger.info("Fetching transactions with pagination: pageNo = {}, pageSize = {}", pageNo, pageSize);
        try {
            PageResponse<Transaction> pageResponse = transactionService.getAllTransactions(pageNo, pageSize);
            logger.info("Transactions fetched successfully, total records: {}", pageResponse.getTotalPages());
            return new ResponseEntity<>(pageResponse, HttpStatus.OK);
        } catch (Exception e) {
            logger.error("Error occurred while fetching transactions: {}", e.getMessage(), e);
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    private boolean isValidTransactionType(String transactionType) {
        return "transfer".equalsIgnoreCase(transactionType) ||
               "debit".equalsIgnoreCase(transactionType) ||
               "credit".equalsIgnoreCase(transactionType);
    }

    private void logTransactionDetails(String senderAccountNumber, String receiverAccountNumber, double amount, String transactionType) {
        logger.info("Transaction details - Sender Account Number: {}, Receiver Account Number: {}, Amount: {}, Transaction Type: {}",
                senderAccountNumber, receiverAccountNumber, amount, transactionType);
    }
}

   