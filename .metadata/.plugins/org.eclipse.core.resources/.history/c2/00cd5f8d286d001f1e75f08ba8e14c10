package com.aurionpro.mappings.service;

import org.springframework.stereotype.Service;


import com.aurionpro.mappings.entity.Captcha;
import com.aurionpro.mappings.repository.CaptchaRepository;

import java.security.SecureRandom;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Random;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.Random;
@Service
public class CaptchaService {

//	private static final String CAPTCHA_CHARACTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
//    private static final Random RANDOM = new SecureRandom();

	private final Map<String, String> captchaStore = new HashMap<>();
    private final Random random = new Random();

    public String generateCaptcha() {
        int length = 4 + random.nextInt(3); // Generate CAPTCHA with 4-6 characters
        return random.ints(48, 122)
                .filter(i -> (i <= 57 || i >= 65) && (i <= 90 || i >= 97))
                .limit(length)
                .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
                .toString();
    }

    public BufferedImage generateCaptchaImage(String captchaText) {
        BufferedImage image = new BufferedImage(200, 50, BufferedImage.TYPE_INT_RGB);
        Graphics2D g = image.createGraphics();
        g.setFont(new Font("Arial", Font.BOLD, 40));
        g.setColor(Color.WHITE);
        g.fillRect(0, 0, 200, 50);
        g.setColor(Color.BLACK);
        g.drawString(captchaText, 20, 40);
        g.dispose();
        return image;
    }

    public void storeCaptcha(String captchaId, String captchaText) {
        captchaStore.put(captchaId, captchaText);
    }

    public boolean validateCaptcha(String captchaId, String captchaText) {
        String storedCaptcha = captchaStore.get(captchaId);
        return storedCaptcha != null && storedCaptcha.equals(captchaText);
    }

//    private static final String CAPTCHA_CHARACTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
//    private static final Random RANDOM = new SecureRandom();

    // Method to generate a CAPTCHA with a length between 4 to 6 characters
//    public String generateCaptcha() {
//        int length = 4 + new Random().nextInt(3); // Length will be either 4, 5, or 6
//        String captchaChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
//        StringBuilder captcha = new StringBuilder(length);
//        Random random = new Random();
//        for (int i = 0; i < length; i++) {
//            captcha.append(captchaChars.charAt(random.nextInt(captchaChars.length())));
//        }
//        return captcha.toString();
//    }
//    
//    public void storeCaptcha(String captchaId, String inputCaptcha) {
//        Captcha captcha = new Captcha();
//        captcha.setCaptchaId(captchaId);
//        captcha.setInputCaptcha(inputCaptcha);
//        captcha.setCreatedAt(LocalDateTime.now());
//        captchaRepository.save(captcha);
//    }
//
//    public Captcha getCaptcha(String captchaId) {
//        return captchaRepository.findByCaptchaId(captchaId);
//    }
//
//    public boolean validateCaptcha(String captchaId, String inputCaptcha) {
//        Optional<Captcha> captchaOptional = Optional.of(captchaRepository.findByCaptchaId(captchaId));
//        if (captchaOptional.isPresent()) {
//            Captcha captcha = captchaOptional.get();
//            return captcha.getInputCaptcha().equals(inputCaptcha);
//        }
//        return false;
//    }
//
//    public void removeCaptcha(String captchaId) {
//        Captcha captcha = getCaptcha(captchaId);
//        if (captcha != null) {
//            captchaRepository.delete(captcha);
//        }
//    }
}