package com.aurionpro.mappings.service;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;

import com.aurionpro.mappings.dto.CustomerDto;
import com.aurionpro.mappings.dto.PageResponse;
import com.aurionpro.mappings.entity.Customer;
import com.aurionpro.mappings.entity.Role;
import com.aurionpro.mappings.entity.User;
import com.aurionpro.mappings.exception.UserApiException;
import com.aurionpro.mappings.repository.CustomerRepository;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.List;

@Service
public class CustomerServiceImpl implements CustomerService  {

	 @Autowired
	    private CustomerRepository customerRepository;

	    
	    private static final Logger logger = LoggerFactory.getLogger(CustomerServiceImpl.class);

	    
	    @Override
	    public String customerRegister(CustomerDto registration) {
	        if (customerRepository.findByEmail(registration.getEmailId()).isPresent()) {
	            throw new UserApiException(HttpStatus.BAD_REQUEST, "Customer with this email already exists.");
	        }

	        Customer customer = new Customer();
	        customer.setFirstName(registration.getFirstName());
	        customer.setLastName(registration.getLastName());
	        customer.setEmailId(registration.getEmailId());
	        customer.setPassword(passwordEncoder.encode(registration.getPassword()));
	        customer.setDateOfBirth(registration.getDateOfBirth());

	        // Set role for the customer (if needed)
	        Role customerRole = roleRepository.findByRoleName("ROLE_CUSTOMER")
	                .orElseThrow(() -> new UserApiException(HttpStatus.BAD_REQUEST, "Role not found."));
	        customer.setRoles(Collections.singletonList(customerRole));

	        customerRepo.save(customer);

	        // Save to User table
	        User user = new User();
	        user.setUsername(customer.getEmailId());
	        user.setPassword(passwordEncoder.encode(customer.getPassword()));
	        user.setRoles(Collections.singletonList(customerRole));

	        userRepo.save(user);

	        return "Customer added successfully!";
	    }

	    
//	    @Override
//	    public Customer addCustomer(Customer customer) {
//	        logger.info("Adding new customer: {}", customer);
//	        Customer savedCustomer = customerRepository.save(customer);
//	        logger.info("Customer added successfully with ID: {}", savedCustomer.getCustomerId());
//	        return savedCustomer;
//	    }


	   	    
	    @Override
	    public Customer editCustomer(int customerId, String currentPassword, String newPassword, String newFirstName, String newLastName) {
	        logger.info("Editing customer with ID: {}", customerId);
	        Customer existingCustomer = getCustomerById(customerId);

	        if (!existingCustomer.getPassword().equals(currentPassword)) {
	            logger.error("Current password is incorrect for customer ID: {}", customerId);
	            throw new RuntimeException("Current password is incorrect");
	        }

	        if (newPassword != null && !newPassword.isEmpty()) {
	            existingCustomer.setPassword(newPassword);
	            logger.info("Password updated for customer ID: {}", customerId);
	        }

	        if (newFirstName != null && !newFirstName.isEmpty()) {
	            existingCustomer.setFirstName(newFirstName);
	            logger.info("First name updated for customer ID: {}", customerId);
	        }

	        if (newLastName != null && !newLastName.isEmpty()) {
	            existingCustomer.setLastName(newLastName);
	            logger.info("Last name updated for customer ID: {}", customerId);
	        }

	        Customer updatedCustomer = customerRepository.save(existingCustomer);
	        logger.info("Customer updated successfully with ID: {}", customerId);
	        return updatedCustomer;
	    }

	    
	    @Override
	    public Customer findByCustomerId(Integer customerId) {
	        logger.info("Finding customer by ID: {}", customerId);
	        return customerRepository.findById(customerId).orElse(null);
	    }


	    @Override
	    public PageResponse<Customer> getAllCustomers(int pageNo, int pageSize) {
	        logger.info("Retrieving all customers with pagination - PageNo: {}, PageSize: {}", pageNo, pageSize);
	        Pageable pageable = PageRequest.of(pageNo, pageSize);
	        Page<Customer> customersPage = customerRepository.findAll(pageable);

	        boolean isLastPage = customersPage.isLast();

	        PageResponse<Customer> pageResponse = new PageResponse<>(
	            customersPage.getContent(),
	            customersPage.getNumber(),
	            customersPage.getSize(),
	            customersPage.getTotalElements(),
	            customersPage.getTotalPages(),
	            isLastPage
	        );

	        logger.info("Retrieved {} customers on page {}", pageResponse.getContent().size(), pageNo);
	        return pageResponse;
	    }
	    
	    @Override
	    public Customer getCustomerById(int customerId) {
	        logger.info("Retrieving customer with ID: {}", customerId);
	        return customerRepository.findById(customerId)
	                                  .orElseThrow(() -> {
	                                      logger.error("Customer with ID {} not found", customerId);
	                                      return new RuntimeException("Customer with ID " + customerId + " not found");
	                                  });
	    }
}

	   

//	    @Override
//	    public void deleteCustomer(int customerId) {
//	        logger.info("Deleting customer with ID: {}", customerId);
//	        if (customerRepository.existsById(customerId)) {
//	            customerRepository.deleteById(customerId);
//	            logger.info("Customer deleted successfully with ID: {}", customerId);
//	        } else {
//	            logger.error("Customer with ID {} not found", customerId);
//	            throw new RuntimeException("Customer with ID " + customerId + " not found");
//	        }
//	    }

	   

//	    @Override
//	    public Customer updatePartial(int customerId, Map<String, Object> updates) {
//	        // Get the existing customer by ID
//	        Customer existingCustomer = getCustomerById(customerId);
//
//	        // Loop through the updates map and apply changes
//	        updates.forEach((key, value) -> {
//	            try {
//	                // Get the field corresponding to the key
//	                Field field = Customer.class.getDeclaredField(key);
//	                field.setAccessible(true); // Make the field accessible
//
//	                // Set the field's value in the existing customer object
//	                field.set(existingCustomer, value);
//	            } catch (NoSuchFieldException | IllegalAccessException e) {
//	                // Handle exceptions if the field does not exist or is not accessible
//	                throw new RuntimeException("Failed to update field: " + key, e);
//	            }
//	        });
//
//	        // Save and return the updated customer
//	        return customerRepository.save(existingCustomer);
//	    }


	    
	    
//	    @Override
//	    // Update an existing customer
//	    public Customer updateCustomer(int customerId, @Valid Customer customer) {
//	        Optional<Customer> existingCustomerOpt = customerRepository.findById(customerId);
//	        if (existingCustomerOpt.isPresent()) {
//	            Customer existingCustomer = existingCustomerOpt.get();
//
//	            // Update the fields only if provided
//	            if (customer.getFirstName() != null && !customer.getFirstName().isBlank()) {
//	                existingCustomer.setFirstName(customer.getFirstName());
//	            }
//
//	            if (customer.getLastName() != null && !customer.getLastName().isBlank()) {
//	                existingCustomer.setLastName(customer.getLastName());
//	            }
//
//	            if (customer.getEmailId() != null && !customer.getEmailId().isBlank()) {
//	                existingCustomer.setEmailId(customer.getEmailId());
//	            }
//
//	            if (customer.getPassword() != null && !customer.getPassword().isBlank()) {
//	                existingCustomer.setPassword(customer.getPassword());
//	            }
//
//	            if (customer.getBalance() != null) {
//	                existingCustomer.setBalance(customer.getBalance());
//	            }
//
//	            return customerRepository.save(existingCustomer);
//	        } else {
//	            throw new ResourceNotFoundException("Customer not found with id " + customerId);
//	        }
//	    }
	    