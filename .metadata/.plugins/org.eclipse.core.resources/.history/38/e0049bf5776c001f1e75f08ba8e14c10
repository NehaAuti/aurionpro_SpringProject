package com.aurionpro.mappings.controller;


import org.springframework.web.bind.annotation.GetMapping;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.aurionpro.mappings.entity.Captcha;
import com.aurionpro.mappings.service.CaptchaService;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

@RestController
@RequestMapping("bankapp/captcha")
public class CaptchaController {

    private final CaptchaService captchaService;

    public CaptchaController(CaptchaService captchaService) {
        this.captchaService = captchaService;
    }

    @GetMapping("/generate")
    public Map<String, String> generateCaptcha() {
        String captchaId = UUID.randomUUID().toString(); // Unique ID for the CAPTCHA
        String captcha = captchaService.generateCaptcha(); // Generate CAPTCHA of size 4 to 6
        captchaService.storeCaptcha(captchaId, captcha);  // Store the CAPTCHA in the database

        // Create a response map to return both the captchaId and the generated captcha
        Map<String, String> response = new HashMap<>();
        response.put("captchaId", captchaId);   // Return the captcha ID (to be used for validation later)
        response.put("captcha", captcha);       // Return the actual CAPTCHA string

        return response;
    }

    @PostMapping("/validate")
    public String validateCaptcha(
            @RequestParam String captchaId,
            @RequestParam String inputCaptcha) {
        Captcha storedCaptcha = captchaService.getCaptcha(captchaId);
        if (storedCaptcha != null && storedCaptcha.getInputCaptcha().equals(inputCaptcha)) {
            captchaService.removeCaptcha(captchaId); // Optional: Remove captcha after validation
            return "Captcha is valid";
        } else {
            return "Captcha is invalid";
        }
    }
}