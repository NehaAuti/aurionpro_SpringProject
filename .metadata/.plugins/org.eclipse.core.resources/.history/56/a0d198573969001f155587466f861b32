package com.aurionpro.batchprocessing.config;

import javax.sql.DataSource;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.item.database.JdbcCursorItemReader;
import org.springframework.batch.item.database.builder.JdbcCursorItemReaderBuilder;
import org.springframework.batch.item.file.FlatFileItemWriter;
import org.springframework.batch.item.file.builder.FlatFileItemWriterBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.FileSystemResource;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;

import com.auriopro.batchprocessing.entity.Employee;

@Configuration
//@EnableBatchProcessing
public class EmployeeBatchConfig {

    @Bean
    public JdbcCursorItemReader<Employee> databaseReader(DataSource dataSource) {
        return new JdbcCursorItemReaderBuilder<Employee>()
                .dataSource(dataSource)
                .name("employeeDbReader")
                .sql("SELECT employee_id, name, salary FROM employee")
                .rowMapper((rs, rowNum) -> new Employee(
                        rs.getInt("employee_id"),
                        rs.getString("name"),
                        rs.getDouble("salary")))
                .build();
    }

    @Bean
    public FlatFileItemWriter<Employee> csvWriter() {
        return new FlatFileItemWriterBuilder<Employee>()
                .name("employeeCsvWriter")
                .resource(new FileSystemResource("Employee.csv"))
                .delimited()
                .delimiter(",")
                .names("employeeId", "name", "salary")
                .headerCallback(writer -> writer.write("Employee ID, Name, Salary"))
                .build();
    }

    @Bean
    public Step step1(JobRepository jobRepository, DataSourceTransactionManager transactionManager,
                      JdbcCursorItemReader<Employee> reader, FlatFileItemWriter<Employee> writer) {
        return new StepBuilder("exportDbToCsvStep", jobRepository).<Employee, Employee>chunk(2, transactionManager)
                .reader(reader).writer(writer).build();
    }

    @Bean
    public Job exportUserJob(JobRepository jobRepository, Step step1, JobCompletionNotificationListener listener) {
        return new JobBuilder("exportUserJob", jobRepository).listener(listener).start(step1).build();
    }

    @Bean
    public DataSourceTransactionManager transactionManager(DataSource dataSource) {
        return new DataSourceTransactionManager(dataSource);
    }

}
