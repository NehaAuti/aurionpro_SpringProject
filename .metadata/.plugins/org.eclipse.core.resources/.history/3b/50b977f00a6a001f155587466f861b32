package com.aurionpro.mappings.security;

import java.util.Optional;
import java.util.Set;


import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.aurionpro.mappings.entity.Customer;
import com.aurionpro.mappings.entity.User;
import com.aurionpro.mappings.repository.CustomerRepository;
import com.aurionpro.mappings.repository.UserRepository;



@Service
public class CustomUserDetailService implements UserDetailsService {


    @Autowired
    private UserRepository userRepo;
    @Autowired
    public CustomUserDetailService(UserRepository userRepository) {
        this.userRepo = userRepository;
    }
    
    @Autowired
    private CustomerRepository customerRepository;
    
    @Autowired
    public CustomUserDetailService(CustomerRepository customerRepository) {
        this.customerRepository = customerRepository;
    }
    
    
    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        // First, try to load the user as an admin
    	User user = userRepo.findByUsername(username).orElseThrow(
				()-> new UsernameNotFoundException("User not found"));
		
		Set<GrantedAuthority> authorities = user
				.getRoles()
				.stream()
				.map((role)->new SimpleGrantedAuthority(role.getRolename()))
				.collect(Collectors.toSet());
		return new org.springframework.security.core.userdetails.User(user.getUsername(), user.getPassword(), authorities);
    }
    
}
    
 

//    @Override
//    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
//        User user = userRepo.findByUsername(username)
//                .orElseThrow(() -> new UsernameNotFoundException("User not found with username: " + username));
//
//        Set<GrantedAuthority> authorities = user.getRoles().stream()
//                .map(role -> new SimpleGrantedAuthority(role.getRolename()))
//                .collect(Collectors.toSet());
//
//        return new org.springframework.security.core.userdetails.User(
//                user.getUsername(),
//                user.getPassword(),
//                authorities);
//    }
    

    

