package com.aurionpro.mappings.service;

import org.springframework.data.domain.Page;

import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.aurionpro.mappings.dto.CustomerDto;
import com.aurionpro.mappings.dto.PageResponse;
import com.aurionpro.mappings.entity.Customer;
import com.aurionpro.mappings.entity.Role;
import com.aurionpro.mappings.entity.User;
import com.aurionpro.mappings.exception.UserApiException;
import com.aurionpro.mappings.repository.CustomerRepository;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.List;

@Service
public class CustomerServiceImpl implements CustomerService  {

	    @Autowired
	    private CustomerRepository customerRepository;
	
	    @Autowired
	    private PasswordEncoder passwordEncoder;

	    
	    private static final Logger logger = LoggerFactory.getLogger(CustomerServiceImpl.class);

	    
	    @Override
	    public Customer addCustomer(Customer customer) {
	        logger.info("Adding new customer: {}", customer);
	        Customer savedCustomer = customerRepository.save(customer);
	        logger.info("Customer added successfully with ID: {}", savedCustomer.getCustomerId());
	        return savedCustomer;
	    }


	   	    
	    @Override
	    public Customer editCustomer(int customerId, String currentPassword, String newPassword, String newFirstName, String newLastName) {
	        logger.info("Editing customer with ID: {}", customerId);
	        Customer existingCustomer = getCustomerById(customerId);

	        // Compare the plain text password with the stored hashed password
	        if (!passwordEncoder.matches(currentPassword, existingCustomer.getPassword())) {
	            logger.error("Current password is incorrect for customer ID: {}", customerId);
	            throw new RuntimeException("Current password is incorrect");
	        }

	        // Update the password if a new one is provided
	        if (newPassword != null && !newPassword.isEmpty()) {
	            existingCustomer.setPassword(passwordEncoder.encode(newPassword));
	            logger.info("Password updated for customer ID: {}", customerId);
	        }

	        // Update the first name if provided
	        if (newFirstName != null && !newFirstName.isEmpty()) {
	            existingCustomer.setFirstName(newFirstName);
	            logger.info("First name updated for customer ID: {}", customerId);
	        }

	        // Update the last name if provided
	        if (newLastName != null && !newLastName.isEmpty()) {
	            existingCustomer.setLastName(newLastName);
	            logger.info("Last name updated for customer ID: {}", customerId);
	        }

	        // Save the updated customer
	        Customer updatedCustomer = customerRepository.save(existingCustomer);
	        logger.info("Customer updated successfully with ID: {}", customerId);
	        return updatedCustomer;
	    }
	
	    
	    @Override
	    public Customer findByCustomerId(Integer customerId) {
	        logger.info("Finding customer by ID: {}", customerId);
	        return customerRepository.findById(customerId).orElse(null);
	    }


	    @Override
	    public PageResponse<Customer> getAllCustomers(int pageNo, int pageSize) {
	        logger.info("Retrieving all customers with pagination - PageNo: {}, PageSize: {}", pageNo, pageSize);
	        Pageable pageable = PageRequest.of(pageNo, pageSize);
	        Page<Customer> customersPage = customerRepository.findAll(pageable);

	        boolean isLastPage = customersPage.isLast();

	        PageResponse<Customer> pageResponse = new PageResponse<>(
	            customersPage.getContent(),
	            customersPage.getNumber(),
	            customersPage.getSize(),
	            customersPage.getTotalElements(),
	            customersPage.getTotalPages(),
	            isLastPage
	        );

	        logger.info("Retrieved {} customers on page {}", pageResponse.getContent().size(), pageNo);
	        return pageResponse;
	    }
	    
	    @Override
	    public Customer getCustomerById(int customerId) {
	        logger.info("Retrieving customer with ID: {}", customerId);
	        return customerRepository.findById(customerId)
	                                  .orElseThrow(() -> {
	                                      logger.error("Customer with ID {} not found", customerId);
	                                      return new RuntimeException("Customer with ID " + customerId + " not found");
	                                  });
	    }
}

	   

//	    @Override
//	    public void deleteCustomer(int customerId) {
//	        logger.info("Deleting customer with ID: {}", customerId);
//	        if (customerRepository.existsById(customerId)) {
//	            customerRepository.deleteById(customerId);
//	            logger.info("Customer deleted successfully with ID: {}", customerId);
//	        } else {
//	            logger.error("Customer with ID {} not found", customerId);
//	            throw new RuntimeException("Customer with ID " + customerId + " not found");
//	        }
//	    }

	   



	    
	 