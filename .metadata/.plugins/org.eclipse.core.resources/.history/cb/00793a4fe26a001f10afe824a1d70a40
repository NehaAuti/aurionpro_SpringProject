package com.aurionpro.mappings.service;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import java.sql.Timestamp;
import java.time.LocalDate;

import java.time.ZoneId;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.aurionpro.mappings.dto.PageResponse;
import com.aurionpro.mappings.entity.BankAccount;
import com.aurionpro.mappings.entity.Customer;
import com.aurionpro.mappings.entity.Passbook;
import com.aurionpro.mappings.entity.Transaction;
import com.aurionpro.mappings.entity.TransactionType;
import com.aurionpro.mappings.exception.CustomerNotFoundException;
import com.aurionpro.mappings.exception.InsufficientBalanceException;
import com.aurionpro.mappings.exception.InvalidAmountException;
import com.aurionpro.mappings.exception.InvalidTransactionTypeException;
import com.aurionpro.mappings.repository.BankAccountRepository;
import com.aurionpro.mappings.repository.CustomerRepository;
import com.aurionpro.mappings.repository.PassbookRepository;
import com.aurionpro.mappings.repository.TransactionRepository;

import jakarta.transaction.Transactional;
import jakarta.validation.ConstraintViolationException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Service
public class TransactionServiceImpl implements TransactionService {
    
    private static final Logger logger = LoggerFactory.getLogger(TransactionServiceImpl.class);

    @Autowired
    private TransactionRepository transactionRepo;

    @Autowired
    private BankAccountRepository bankAccountRepo;

    @Autowired
    private CustomerRepository customerRepo;

    @Autowired
    private PassbookRepository passbookRepo;
    
    @Autowired
    private EmailService emailService;
    
    private static final double MINIMUM_BALANCE = 5000.00;

    public Transaction createTransaction(int customerId, String senderAccountNumber, String receiverAccountNumber, double amount, String transactionType) {

        logger.info("Creating transaction. Customer ID: {}, Sender Account: {}, Receiver Account: {}, Amount: {}, Transaction Type: {}",
                customerId, senderAccountNumber, receiverAccountNumber, amount, transactionType);

        // Validate transaction type
        TransactionType transactionEnum;
        try {
            transactionEnum = TransactionType.valueOf(transactionType.toUpperCase());
        } catch (IllegalArgumentException e) {
            logger.error("Invalid transaction type: {}", transactionType);
            throw new InvalidTransactionTypeException("Invalid transaction type: " + transactionType);
        }

        // Validate amount
        if (amount <= 0) {
            logger.error("Invalid amount: {}", amount);
            throw new InvalidAmountException("Transaction amount must be greater than zero.");
        }

        // Fetch and validate the sender account
        Optional<BankAccount> optionalSenderAccount = bankAccountRepo.findByAccountNumber(senderAccountNumber);
        BankAccount senderAccount = optionalSenderAccount.orElseThrow(() -> {
            logger.error("Sender account number not found: {}", senderAccountNumber);
            return new IllegalArgumentException("Sender account number not found.");
        });

        // Handle different transaction types
        switch (transactionEnum) {
            case TRANSFER:
                logger.info("Processing transfer transaction.");

                // Validate receiver account number for transfer
                if (receiverAccountNumber == null || receiverAccountNumber.trim().isEmpty()) {
                    logger.error("Receiver account number must be provided for a transfer.");
                    throw new IllegalArgumentException("Receiver account number must be provided for a transfer.");
                }

                if (senderAccountNumber.equals(receiverAccountNumber)) {
                    logger.error("Sender and receiver account numbers cannot be the same for a transfer.");
                    throw new IllegalArgumentException("Sender and receiver account numbers cannot be the same.");
                }

                // Fetch and validate the receiver account
                Optional<BankAccount> optionalReceiverAccount = bankAccountRepo.findByAccountNumber(receiverAccountNumber);
                BankAccount receiverAccount = optionalReceiverAccount.orElseThrow(() -> {
                    logger.error("Receiver account number not found: {}", receiverAccountNumber);
                    return new IllegalArgumentException("Receiver account number not found.");
                });

                // Check if sender has sufficient balance
                if (senderAccount.getBalance() - amount < MINIMUM_BALANCE) {
                    logger.error("Insufficient balance for sender account: {}", senderAccountNumber);
                    throw new InsufficientBalanceException("Insufficient balance.");
                }

                // Perform the transfer
                senderAccount.setBalance(senderAccount.getBalance() - amount);
                receiverAccount.setBalance(receiverAccount.getBalance() + amount);

                // Save both accounts
                bankAccountRepo.save(senderAccount);
                bankAccountRepo.save(receiverAccount);
                break;

            case DEBIT:
                logger.info("Processing debit transaction.");

                // Check if sender has sufficient balance
                if (senderAccount.getBalance() - amount < MINIMUM_BALANCE) {
                    logger.error("Insufficient balance for sender account: {}", senderAccountNumber);
                    throw new InsufficientBalanceException("Insufficient balance.");
                }

                // Debit the amount from the sender account
                senderAccount.setBalance(senderAccount.getBalance() - amount);
                bankAccountRepo.save(senderAccount);
                break;

            case CREDIT:
                logger.info("Processing credit transaction.");

                // Credit the amount to the sender account
                senderAccount.setBalance(senderAccount.getBalance() + amount);
                bankAccountRepo.save(senderAccount);
                break;

            default:
                logger.error("Invalid transaction type: {}", transactionType);
                throw new InvalidTransactionTypeException("Invalid transaction type.");
        }

        // Create and save the transaction record
        Transaction transaction = new Transaction();
        transaction.setSenderAccount(senderAccount);
        transaction.setReceiverAccount(transactionEnum == TransactionType.TRANSFER ? bankAccountRepo.findByAccountNumber(receiverAccountNumber).orElse(null) : null);
        transaction.setAmount(amount);
        transaction.setTransactionType(transactionEnum);
        transaction.setTransactionDate(LocalDate.now());

        Transaction savedTransaction = transactionRepo.save(transaction);
        logger.info("Transaction created successfully with ID: {}", savedTransaction.getTransactionId());

        // Send confirmation email
        String subject = "Transaction Confirmation";
        String body = String.format("Dear Customer,\n\nYour transaction with ID %d has been successfully processed.\nAmount: %.2f\nType: %s\nDate: %s\n\nThank you,\nBank",
                savedTransaction.getTransactionId(), amount, transactionType, LocalDate.now());
        emailService.sendEmail(senderAccount.getCustomer().getEmailId(), subject, body);

        return savedTransaction;
    }


    @Override
    public boolean isCustomerValid(int customerId) {
        boolean isValid = customerRepo.existsById(customerId);
        logger.debug("Checking if customer is valid: Customer ID: {}, Valid: {}", customerId, isValid);
        return isValid;
    }

    @Override
    public boolean isAccountValid(String accountNumber) {
        boolean isValid = bankAccountRepo.existsByAccountNumber(accountNumber);
        logger.debug("Checking if account is valid: Account Number: {}, Valid: {}", accountNumber, isValid);
        return isValid;
    }

    
    @Override
    public boolean hasSufficientBalance(BankAccount account, double amount) {
        boolean hasBalance = account.getBalance() >= amount;
        logger.debug("Checking if account has sufficient balance: Account Number: {}, Required Amount: {}, Has Sufficient Balance: {}",
                account.getAccountNumber(), amount, hasBalance);
        return hasBalance;
    }

    // Method to fetch the customer email by ID
    private String getCustomerEmailById(int customerId) {
        return customerRepo.findById(customerId)
                .map(Customer::getEmailId)
                .orElseThrow(() -> new RuntimeException("Customer not found"));
    }


    @Override
    public PageResponse<Transaction> getAllTransactions(int pageNo, int pageSize) {
        logger.info("Retrieving all transactions with pagination - PageNo: {}, PageSize: {}", pageNo, pageSize);
        Pageable pageable = PageRequest.of(pageNo, pageSize);
        Page<Transaction> transactionsPage = transactionRepo.findAll(pageable);

        boolean isLastPage = transactionsPage.isLast();

        PageResponse<Transaction> pageResponse = new PageResponse<>(
            transactionsPage.getContent(),
            transactionsPage.getNumber(),
            transactionsPage.getSize(),
            transactionsPage.getTotalElements(),
            transactionsPage.getTotalPages(),
            isLastPage
        );

        logger.info("Retrieved {} transactions on page {}", pageResponse.getContent().size(), pageNo);
        return pageResponse;
    }


    
    @Override
    public List<Transaction> getAllTransactionsByAccountNumber(String accountNumber) {
        logger.info("Fetching transactions for account number: {}", accountNumber);
        BankAccount bankAccount = bankAccountRepo.findByAccountNumber(accountNumber)
                .orElseThrow(() -> new RuntimeException("Account not found for account number: " + accountNumber));
        
        // Fetching sent and received transactions
        List<Transaction> transactions = bankAccount.getSentTransactions();
        transactions.addAll(bankAccount.getReceivedTransactions());

        logger.info("Retrieved {} transactions for account number: {}", transactions.size(), accountNumber);
        return transactions;
    }

	@Override
	public boolean isValidTransactionType(String transactionType) {
		// TODO Auto-generated method stub
		return false;
	}
}
