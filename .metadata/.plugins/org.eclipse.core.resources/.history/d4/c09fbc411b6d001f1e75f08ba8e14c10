package com.aurionpro.mappings.controller;

import java.util.Collections;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.imageio.ImageIO;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import com.aurionpro.mappings.dto.CustomerDto;
import com.aurionpro.mappings.dto.JwtAuthResponse;
import com.aurionpro.mappings.dto.LoginDTO;
import com.aurionpro.mappings.dto.RegistrationDTO;
import com.aurionpro.mappings.entity.Customer;
import com.aurionpro.mappings.entity.User;
import com.aurionpro.mappings.exception.CustomerNotFoundException;
import com.aurionpro.mappings.exception.InvalidInputException;
import com.aurionpro.mappings.exception.UserApiException;
import com.aurionpro.mappings.service.AuthService;
import com.aurionpro.mappings.service.CaptchaService;

import jakarta.validation.Valid;
import lombok.extern.slf4j.Slf4j;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/bankapp")
@Slf4j
public class AuthController {
	
	@Autowired
    private AuthService authService;

    @Autowired
    private  CaptchaService captchaService;

	@PostMapping("register/admin")
    public ResponseEntity<User> registerAdmin(@RequestBody RegistrationDTO registerDto) {
        try {
            log.info("Registering new admin: {}", registerDto.getUsername());
            User user = authService.register(registerDto);
            log.info("Admin registration successful for: {}", registerDto.getUsername());
            return ResponseEntity.ok(user);
        } catch (InvalidInputException e) {
            log.error("Invalid input during admin registration: {}", e.getMessage());
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        } catch (Exception e) {
            log.error("Unexpected error during admin registration", e);
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PostMapping("register/customer")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<CustomerDto> addNewCustomer(@RequestBody CustomerDto customerDTO) {
        log.info("Received request to add new customer: {} {}", customerDTO.getFirstName(), customerDTO.getLastName());
        CustomerDto createdCustomer = authService.addNewCustomer(customerDTO);
        return ResponseEntity.ok(createdCustomer);
    }


    @PostMapping("/generate")
    public Map<String, String> generateCaptcha() {
        // Generate CAPTCHA with 4 to 6 characters
        String captcha = captchaService.generateCaptcha();
        String captchaId = "CAPTCHA-" + System.currentTimeMillis(); // Generate a unique ID

        captchaService.storeCaptcha(captchaId, captcha); // Store CAPTCHA with its ID

        // Generate CAPTCHA image
        BufferedImage captchaImage = captchaService.generateCaptchaImage(captcha);

        // Convert image to Base64 string
        String captchaImageBase64 = encodeImageToBase64(captchaImage);  // Pass captchaImage instead of captchaText

        // Return a structured response
        Map<String, String> response = new HashMap<>();
        response.put("captchaId", captchaId);
        response.put("captchaImage", captchaImageBase64);

        return response;
    }

    // Method to convert BufferedImage to Base64
    private String encodeImageToBase64(BufferedImage image) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try {
            ImageIO.write(image, "png", baos);
        } catch (IOException e) {
            e.printStackTrace();
        }
        byte[] imageBytes = baos.toByteArray();
        return Base64.getEncoder().encodeToString(imageBytes);
    }

    public BufferedImage generateCaptchaImage(String captchaText) {
        // Reduce the width and height
        int width = 150;  // Set the width to a smaller value
        int height = 50;  // Set the height to a smaller value

        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        Graphics2D g = image.createGraphics();
        
        // Set font size and properties accordingly
        g.setFont(new Font("Arial", Font.BOLD, 24));  // Adjust font size to fit smaller image
        g.setColor(Color.WHITE);
        g.fillRect(0, 0, width, height);
        g.setColor(Color.BLACK);
        
        // Draw the CAPTCHA text on the image
        g.drawString(captchaText, 20, 35);  // Adjust position to fit the smaller image
        
        g.dispose();
        return image;
    }

    @PostMapping("/login")
    public ResponseEntity<Map<String, String>> login(@RequestBody LoginDTO loginDto) {
        // Validate CAPTCHA
        boolean isCaptchaValid = captchaService.validateCaptcha(loginDto.getCaptchaId(), loginDto.getCaptcha());

        if (!isCaptchaValid) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(
                Collections.singletonMap("message", "Invalid CAPTCHA")
            );
        }

        try {
            // Perform authentication logic
            String token = authService.login(loginDto);

            // Return token in response
            Map<String, String> response = new HashMap<>();
            response.put("token", token);
            return ResponseEntity.ok(response);
        } catch (UserApiException e) {
            // Return specific error response
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("message", e.getMessage());
            return ResponseEntity.status(e.getStatus()).body(errorResponse);
        } catch (Exception e) {
            // Handle unexpected errors
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("message", "An unexpected error occurred. Please try again later.");
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }
}

    
	

